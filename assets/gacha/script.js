

// Strict mode ƒë·ªÉ ƒë·∫£m b·∫£o code s·∫°ch h∆°n
(function () {
    'use strict'

    // =================================================================
    // C√ÄI ƒê·∫∂T BAN ƒê·∫¶U V√Ä C√ÅC BI·∫æN TO√ÄN C·ª§C
    // =================================================================

    const MAX_TRAY_BALLS = 6 // S·ªë l∆∞·ª£ng k·∫πo t·ªëi ƒëa trong khay

    // D·ªØ li·ªáu k·∫πo. C√≥ th·ªÉ ƒë∆∞·ª£c m·ªü r·ªông t·ª´ ngu·ªìn kh√°c.
    const language = window.dataGachaLoveLoom?.messages;
    const defaultCandy = { text: language.default_candy_text, image: '' }
    const candyTexts = [
        ...(window.dataGachaLoveLoom?.data?.candyTexts || [defaultCandy]),
    ]
    function formatMessage(messageString, replacements = {}) {
        let formatted = messageString;
        for (const key in replacements) {
            formatted = formatted.replace(`:${key}`, replacements[key]);
        }
        return formatted;
    }

    // L·∫•y c√°c ph·∫ßn t·ª≠ DOM
    const egg = document.querySelector('.egg')
    const eggColor = document.querySelector('.egg-color')
    const openEggColor = document.querySelector('.open-egg-color')
    const machine = document.querySelector('.machine')
    const winnerDisplay = document.querySelector('.winner')
    const mask = document.querySelector('.mask')
    const switchBtn = document.querySelector('.switch')
    const stickyContainer = document.querySelector('.sticky-notes-container')
    const quantityInput = document.getElementById('quantity-input');
    const increaseBtn = document.getElementById('increase-btn');
    const decreaseBtn = document.getElementById('decrease-btn');

    // Tr·∫°ng th√°i game
    let ballsInMachine = []
    let isProcessing = false
    let currentWinnerBall = null // Qu·∫£ tr·ª©ng ƒëang ch·ªù ƒë∆∞·ª£c m·ªü
    let hasWinner = false
    let trayBalls = [] // K·∫πo ƒë√£ m·ªü v√† n·∫±m trong khay
    let stickyNotes = [] // C√°c ghi ch√∫ d√°n tr√™n m√†n h√¨nh
    let isErrorMessage = false;
    let animatingToTrayCount = 0;
    // √Çm thanh
    const switchSound = new Audio('../love.tsonit.com/storage/musics/stwich_sound.mp3')
    switchSound.volume = 0.22
    const bgMusic = new Audio('../love.tsonit.com/assets/gacha/sounds/Background.mp3')
    bgMusic.loop = true
    bgMusic.volume = 0.3
    let bgMusicStarted = false
    const popSound = new Audio('../love.tsonit.com/storage/musics/pop.mp3')
    popSound.volume = 0.6
    // --- TH√äM M·ªöI ---
    const revealSound = new Audio('../love.tsonit.com/storage/musics/pop.mp3'); // T·∫°o √¢m thanh m·ªõi
    revealSound.volume = 0.5;

    const gachaponContainer = document.querySelector('.gachapon'); // L·∫•y c·∫£ container l·ªõn
    const topLight = document.querySelector('.machine > path[fill="#ed483e"]'); // L·∫•y ƒë√®n tr√™n n√≥c
    // --- K·∫æT TH√öC TH√äM M·ªöI ---
    // =================================================================
    // LOGIC CHO GHI CH√ö (STICKY NOTES)
    // =================================================================

    let isDragging = false
    let dragElement = null
    let dragStartX = 0
    let dragStartY = 0
    let dragStartTime = 0
    let isFromStickyNote = false // D√πng ƒë·ªÉ ph√¢n bi·ªát click m·ªü l·∫°i t·ª´ sticky note



    function createStickyNote(content, eggColorValue = null) {
        const note = document.createElement('div')
        note.className = 'sticky-note creating'
        note.innerHTML = `<span class="pin-icon">üìç</span>${content}`

        if (eggColorValue) {
            note.setAttribute('data-egg-color', eggColorValue)
        }

        const position = calculateStickyPosition(stickyNotes.length)
        note.style.left = `${position.x}px`
        note.style.top = `${position.y}px`
        note.style.zIndex = (10 + stickyNotes.length).toString()

        const scale = window.innerWidth <= 768 ? 0.3 : 0.5
        note.style.setProperty('--note-scale', scale)

        note.addEventListener('mousedown', (event) => startDrag(event, note))
        note.addEventListener('touchstart', (event) => startDrag(event, note), {
            passive: false,
        })

        stickyContainer.appendChild(note)
        stickyNotes.push(note)

        setTimeout(() => {
            note.classList.remove('creating')
            note.classList.add('highlight')
            setTimeout(() => note.classList.remove('highlight'), 1000)
        }, 500)
    }

    function startDrag(event, element) {
        event.preventDefault()
        if (event.target.closest('.winner')) return

        isDragging = true
        dragElement = element
        element.classList.remove('shake-bottom')
        if (element['_shakeTimeout']) clearTimeout(element['_shakeTimeout'])

        const clientX = event.touches ? event.touches[0].clientX : event.clientX
        const clientY = event.touches ? event.touches[0].clientY : event.clientY

        dragStartX = clientX
        dragStartY = clientY
        dragStartTime = Date.now()

        element['_dragInitialLeft'] = parseFloat(element.style.left) || 0
        element['_dragInitialTop'] = parseFloat(element.style.top) || 0
        element['_dragStartClientX'] = clientX
        element['_dragStartClientY'] = clientY

        element.classList.add('dragging')
        element.style.zIndex = '1000'
    }

    function drag(event) {
        if (!isDragging || !dragElement) return
        event.preventDefault()

        const clientX = event.touches ? event.touches[0].clientX : event.clientX
        const clientY = event.touches ? event.touches[0].clientY : event.clientY
        const dx = clientX - dragElement['_dragStartClientX']
        const dy = clientY - dragElement['_dragStartClientY']

        dragElement.style.left = `${dragElement['_dragInitialLeft'] + dx}px`
        dragElement.style.top = `${dragElement['_dragInitialTop'] + dy}px`
    }

    function endDrag(event) {
        if (!isDragging || !dragElement) return;

        // X√°c ƒë·ªãnh xem ƒë√¢y l√† click hay k√©o-th·∫£
        const clientX = event.changedTouches ? event.changedTouches[0].clientX : event.clientX;
        const clientY = event.changedTouches ? event.changedTouches[0].clientY : event.clientY;
        const distance = Math.hypot(clientX - dragStartX, clientY - dragStartY);
        const duration = Date.now() - dragStartTime;
        const isClick = distance < 5 && duration < 200;

        isDragging = false;
        dragElement.classList.remove('dragging');

        // **LOGIC ƒê√É ƒê∆Ø·ª¢C T√ÅCH BI·ªÜT**

        if (isClick) {
            // --- N·∫æU L√Ä CLICK ---
            // 1. Ch·ªâ th·ª±c hi·ªán logic hi·ªÉn th·ªã l·∫°i th√¥ng tin
            isFromStickyNote = true;
            const content = dragElement.innerHTML.replace(/<span class="pin-icon">.*?<\/span>/, '');
            winnerDisplay.innerHTML = content;

            const eggColor = dragElement.getAttribute('data-egg-color');
            if (eggColor && openEggColor) {
                openEggColor.setAttribute('fill', eggColor);
            }
            mask.classList.add('active');

            document.body.style.userSelect = '';
            document.body.style.webkitUserSelect = '';
            dragElement = null;
            return;

        } else {
            // --- N·∫æU L√Ä K√âO-TH·∫¢ ---
            // 1. Ghi nh·∫≠n v·ªã tr√≠ m·ªõi do ng∆∞·ªùi d√πng ƒë·∫∑t
            dragElement.setAttribute('data-user-positioned', 'true');
            popSound.currentTime = 0;
            popSound.play();

            // 2. TƒÉng z-index ƒë·ªÉ n√≥ n·ªïi l√™n tr√™n
            const maxZIndex = Math.max(...stickyNotes.map(note => parseInt(note.style.zIndex) || 10));
            dragElement.style.zIndex = (maxZIndex + 1).toString();

            // 3. Ch·∫°y animation "th·∫£"
            const scale = window.innerWidth <= 768 ? 0.3 : 0.5;
            dragElement.style.setProperty('--note-scale', scale);
            dragElement.classList.add('shake-bottom');

            // X√≥a c√°c thu·ªôc t√≠nh k√©o-th·∫£
            const elementToClear = dragElement; // L∆∞u l·∫°i tham chi·∫øu
            elementToClear['_shakeTimeout'] = setTimeout(() => {
                elementToClear.classList.remove('shake-bottom');
            }, 700);
        }

        // Reset c√°c bi·∫øn v√† style chung sau khi k·∫øt th√∫c k√©o th·∫£
        document.body.style.userSelect = '';
        document.body.style.webkitUserSelect = '';

        if (dragElement) {
            delete dragElement['_dragInitialLeft'];
            delete dragElement['_dragInitialTop'];
            delete dragElement['_dragStartClientX'];
            delete dragElement['_dragStartClientY'];
        }

        dragElement = null;
    }

    function calculateStickyPosition(index) {
        const isMobile = window.innerWidth <= 768;
        const scale = isMobile ? 0.3 : 0.5;
        const noteWidth = 400 * scale;
        const noteHeight = 200 * scale;
        const gap = isMobile ? 15 : 12;
        const margin = 15;

        const screenWidth = window.innerWidth;
        const screenHeight = window.innerHeight;

        // --- B·∫ÆT ƒê·∫¶U S·ª¨A L·ªñI ---
        // T√≠nh to√°n n·ª≠a chi·ªÅu r·ªông c·ªßa m√°y gacha m·ªôt c√°ch linh ƒë·ªông.
        // Tr√™n mobile, n√≥ b·ªã scale c√≤n 0.75 trong CSS, n√™n ta c≈©ng nh√¢n v·ªõi 0.75 ·ªü ƒë√¢y.
        const machineBaseHalfWidth = 206; // N·ª≠a chi·ªÅu r·ªông m√°y tr√™n desktop
        const machineHalfWidth = isMobile ? (machineBaseHalfWidth * 0.75) : machineBaseHalfWidth;

        // S·ª≠ d·ª•ng gi√° tr·ªã linh ƒë·ªông thay v√¨ s·ªë c·ªë ƒë·ªãnh 206
        const machineZone = {
            left: screenWidth / 2 - machineHalfWidth,
            right: screenWidth / 2 + machineHalfWidth,
            top: 37,
            bottom: 450,
        };
        // --- K·∫æT TH√öC S·ª¨A L·ªñI ---

        // V√πng b√™n tr√°i
        const leftZone = {
            x: margin,
            y: margin,
            width: machineZone.left - margin * 2,
            height: screenHeight - margin * 2,
        };
        // V√πng b√™n ph·∫£i
        const rightZone = {
            x: machineZone.right + margin,
            y: margin,
            width: screenWidth - (machineZone.right + margin) - margin,
            height: screenHeight - margin * 2,
        };

        const notesPerColLeft = Math.floor(leftZone.height / (noteHeight + gap));
        if (index < notesPerColLeft && leftZone.width > noteWidth) {
            return { x: leftZone.x, y: leftZone.y + index * (noteHeight + gap) };
        }

        index -= notesPerColLeft;
        const notesPerColRight = Math.floor(rightZone.height / (noteHeight + gap));
        if (index < notesPerColRight && rightZone.width > noteWidth) {
            return { x: rightZone.x, y: rightZone.y + index * (noteHeight + gap) };
        }

        // V·ªã tr√≠ d·ª± ph√≤ng n·∫øu kh√¥ng ƒë·ªß ch·ªó
        return { x: margin, y: margin + index * 5 };
    }

    function repositionAllStickyNotes() {
        stickyNotes.forEach((note, index) => {
            // --- B·∫ÆT ƒê·∫¶U S·ª¨A L·ªñI ---
            // N·∫øu ghi ch√∫ n√†y ƒëang ƒë∆∞·ª£c k√©o (isDragging) th√¨ b·ªè qua, kh√¥ng s·∫Øp x·∫øp l·∫°i n√≥.
            if (isDragging && note === dragElement) {
                return;
            }
            // --- K·∫æT TH√öC S·ª¨A L·ªñI ---

            if (!note.hasAttribute('data-user-positioned')) {
                const pos = calculateStickyPosition(index);

                // S·ª≠ d·ª•ng l·∫°i logic b√π tr·ª´ ƒë√£ c√≥ ƒë·ªÉ ƒë·∫£m b·∫£o v·ªã tr√≠ ƒë√∫ng
                const isMobile = window.innerWidth <= 768;
                const scale = isMobile ? 0.3 : 0.5;
                const noteBaseWidth = 400;
                const noteBaseHeight = 200;

                const offsetX = (noteBaseWidth * (1 - scale)) / 2;
                const offsetY = (noteBaseHeight * (1 - scale)) / 2;

                const adjustedX = pos.x - offsetX;
                const adjustedY = pos.y - offsetY;

                note.style.left = `${adjustedX}px`;
                note.style.top = `${adjustedY}px`;
            }
        });
    }

    // G·∫Øn c√°c event listener cho vi·ªác k√©o th·∫£
    document.addEventListener('mousemove', drag)
    document.addEventListener('mouseup', endDrag)
    document.addEventListener('touchmove', drag, { passive: false })
    document.addEventListener('touchend', endDrag)
    window.addEventListener('resize', repositionAllStickyNotes)
    // function triggerConfetti() {
    //     let confettiContainer = document.getElementById('confetti-container');
    //     if (!confettiContainer) {
    //         confettiContainer = document.createElement('div');
    //         confettiContainer.id = 'confetti-container';
    //         confettiContainer.className = 'confetti-container';
    //         document.body.appendChild(confettiContainer);
    //     }

    //     confettiContainer.innerHTML = ''; // X√≥a ph√°o gi·∫•y c≈©
    //     const colors = ['#f44336', '#e91e63', '#9c27b0', '#673ab7', '#3f51b5', '#2196f3', '#03a9f4', '#00bcd4', '#009688', '#4caf50', '#8bc34a', '#cddc39', '#ffeb3b', '#ffc107', '#ff9800'];

    //     for (let i = 0; i < 150; i++) {
    //         const piece = document.createElement('div');
    //         piece.className = 'confetti-piece';
    //         piece.style.left = `${Math.random() * 100}vw`;
    //         piece.style.background = colors[Math.floor(Math.random() * colors.length)];
    //         piece.style.animationDelay = `${Math.random() * 0.5}s`;
    //         piece.style.transform = `rotate(${Math.random() * 360}deg)`;
    //         confettiContainer.appendChild(piece);
    //     }

    //     setTimeout(() => {
    //         confettiContainer.innerHTML = '';
    //     }, 4000);
    // }
    // =================================================================
    // LOGIC V·∫¨T L√ù V·ªöI MATTER.JS
    // =================================================================

    document.addEventListener('DOMContentLoaded', function () {
        const Engine = Matter.Engine,
            World = Matter.World,
            Bodies = Matter.Bodies,
            Body = Matter.Body

        const engine = Engine.create()
        const world = engine.world
        world.gravity.y = 1.1

        const centerX = 308.5
        const radius = 260
        const wallSegments = []

        // T·∫°o th√†nh ch·ª©a h√¨nh tr√≤n cho m√°y gacha
        const numSegments = 45
        const gapAngle = Math.PI / 8 // G√≥c m·ªü ·ªü d∆∞·ªõi ƒë·ªÉ k·∫πo r∆°i ra
        const bottomAngle = Math.PI / 2

        for (let i = 0; i < numSegments; i++) {
            const angle1 = (i / numSegments) * 2 * Math.PI
            const angle2 = ((i + 1) / numSegments) * 2 * Math.PI
            if (
                angle1 > bottomAngle - gapAngle / 2 &&
                angle1 < bottomAngle + gapAngle / 2
            )
                continue

            const x1 = centerX + radius * Math.cos(angle1)
            const y1 = 408.5 + 200 * Math.sin(angle1)
            const x2 = centerX + radius * Math.cos(angle2)
            const y2 = 408.5 + 200 * Math.sin(angle2)

            const segment = Bodies.rectangle(
                (x1 + x2) / 2,
                (y1 + y2) / 2,
                Math.hypot(x2 - x1, y2 - y1),
                16,
                {
                    isStatic: true,
                    angle: Math.atan2(y2 - y1, x2 - x1),
                    render: { visible: false },
                }
            )
            wallSegments.push(segment)
        }

        const floor = Bodies.rectangle(centerX, 600.5, radius * 1.7, 24, {
            isStatic: true,
            render: { visible: false },
        })
        World.add(world, [...wallSegments, floor])

        let physicsBalls = []
        const svgContainer = document.getElementById('balls-physics')

        // Kh·ªüi t·∫°o c√°c vi√™n k·∫πo ban ƒë·∫ßu
        function initializeCandies() {
            // Danh s√°ch c√°c m√†u ƒë·∫πp, d·ªÖ nh√¨n v·ªõi ch·ªØ tr·∫Øng, ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ c√≥ ƒë·ªô t∆∞∆°ng ph·∫£n t·ªët
            const pleasantColors = [
                '#FF6B6B', '#4ECDC4', '#45B7D1', '#FFA07A', '#98D8C8', '#F3A683',
                '#B4A7D6', '#574B90', '#F08080', '#9370DB', '#3CB371', '#FFA500',
                '#6A89CC', '#E57373', '#81C784', '#64B5F6', '#FFB74D', '#BA68C8',
                '#D81B60', '#F4511E', '#00897B', '#1E88E5', '#5E35B1'
            ];

            // ----- LOGIC M·ªöI: X√°o tr·ªôn danh s√°ch m√†u ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng tr√πng l·∫∑p -----
            // S·ª≠ d·ª•ng thu·∫≠t to√°n Fisher-Yates ƒë·ªÉ x√°o tr·ªôn m·∫£ng m·ªôt c√°ch hi·ªáu qu·∫£
            const shuffledColors = [...pleasantColors]; // T·∫°o m·ªôt b·∫£n sao ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng m·∫£ng g·ªëc
            for (let i = shuffledColors.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [shuffledColors[i], shuffledColors[j]] = [shuffledColors[j], shuffledColors[i]];
            }
            // ---------------------------------------------------------------------

            ballsInMachine = candyTexts.map((candy, index) => {
                // L·∫•y m√†u t·ª´ danh s√°ch ƒë√£ x√°o tr·ªôn m·ªôt c√°ch tu·∫ßn t·ª±.
                // D√πng to√°n t·ª≠ modulo (%) ƒë·ªÉ l·∫∑p l·∫°i danh s√°ch m√†u n·∫øu s·ªë k·∫πo nhi·ªÅu h∆°n s·ªë m√†u c√≥ s·∫µn.
                const assignedColor = shuffledColors[index % shuffledColors.length];

                return {
                    color: {
                        main: assignedColor,
                        sub: 'white',
                    },
                    text: candy.text,
                    image: candy.image,
                    id: `candy-${Date.now()}-${index}`,
                };
            });
        }

        function createPhysicsBalls() {
            physicsBalls.forEach((ball) => World.remove(world, ball))
            physicsBalls = []

            ballsInMachine.forEach((candyData) => {
                const angle = Math.random() * 2 * Math.PI
                const spawnRadius = (radius - 64) * 0.7
                const x = centerX + spawnRadius * Math.cos(angle)
                const y = 268.5 + Math.random() * 40

                const ball = Bodies.circle(x, y, 32, {
                    restitution: 0.6,
                    friction: 0.05,
                    frictionAir: 0.01,
                    density: 0.002,
                })

                // G·∫Øn d·ªØ li·ªáu v√†o qu·∫£ b√≥ng v·∫≠t l√Ω
                ball.customData = candyData
                physicsBalls.push(ball)
            })
            World.add(world, physicsBalls)
        }

        function renderSVG() {
            svgContainer.innerHTML = '' // X√≥a c√°c SVG c≈©
            physicsBalls.forEach((ball) => {
                const { x, y } = ball.position
                const { main, sub } = ball.customData.color

                const g = document.createElementNS('http://www.w3.org/2000/svg', 'g')
                const circle = document.createElementNS(
                    'http://www.w3.org/2000/svg',
                    'circle'
                )
                circle.setAttribute('cx', x)
                circle.setAttribute('cy', y)
                circle.setAttribute('r', 32)
                circle.setAttribute('fill', main)
                circle.setAttribute('stroke', '#57172F')
                circle.setAttribute('stroke-width', 10)

                const ellipse = document.createElementNS(
                    'http://www.w3.org/2000/svg',
                    'ellipse'
                )
                ellipse.setAttribute('cx', x - 8)
                ellipse.setAttribute('cy', y - 11.2)
                ellipse.setAttribute('rx', 16)
                ellipse.setAttribute('ry', 5.76)
                ellipse.setAttribute('fill', sub)
                ellipse.setAttribute('opacity', 0.7)

                g.appendChild(circle)
                g.appendChild(ellipse)
                svgContainer.appendChild(g)
            })
        }

        function spinMachine() {
            const originalGravity = world.gravity.y
            world.gravity.y = 0.4 // Gi·∫£m tr·ªçng l·ª±c ƒë·ªÉ k·∫πo bay l√™n

            physicsBalls.forEach((ball) => {
                Body.setVelocity(ball, { x: 0, y: 0 })
                const dx = ball.position.x - centerX
                const dy = ball.position.y - 408.5
                const dist = Math.hypot(dx, dy)
                if (dist === 0) return

                // √Åp d·ª•ng l·ª±c xo√°y ban ƒë·∫ßu
                const forceMagnitude = 0.25 + Math.random() * 0.15
                const force = {
                    x: (-dy / dist) * forceMagnitude,
                    y: (dx / dist) * forceMagnitude,
                }
                Body.applyForce(ball, ball.position, force)
            })

            setTimeout(() => {
                world.gravity.y = originalGravity // Kh√¥i ph·ª•c tr·ªçng l·ª±c
            }, 500)
        }

        function pickWinnerBalls(count) {
            const winners = [];
            if (ballsInMachine.length === 0) return winners;

            // S·∫Øp x·∫øp c√°c qu·∫£ b√≥ng v·∫≠t l√Ω t·ª´ th·∫•p ƒë·∫øn cao
            const sortedPhysicsBalls = [...physicsBalls].sort((a, b) => b.position.y - a.position.y);

            for (let i = 0; i < count; i++) {
                if (ballsInMachine.length === 0) break;

                // ∆Øu ti√™n l·∫•y nh·ªØng qu·∫£ b√≥ng th·∫•p nh·∫•t tr∆∞·ªõc
                const targetBall = sortedPhysicsBalls.length > i ? sortedPhysicsBalls[i] : null;

                let winnerData;
                if (targetBall) {
                    winnerData = targetBall.customData;
                } else {
                    // N·∫øu kh√¥ng ƒë·ªß b√≥ng v·∫≠t l√Ω, l·∫•y ng·∫´u nhi√™n t·ª´ d·ªØ li·ªáu c√≤n l·∫°i
                    winnerData = ballsInMachine[Math.floor(Math.random() * ballsInMachine.length)];
                }

                // ƒê·∫£m b·∫£o kh√¥ng ch·ªçn tr√πng l·∫∑p
                if (winners.some(w => w.id === winnerData.id)) {
                    i--; // Th·ª≠ l·∫°i l·∫ßn l·∫∑p n√†y
                    continue;
                }

                winners.push(winnerData);

                // X√≥a k·∫πo ƒë√£ ch·ªçn kh·ªèi c√°c m·∫£ng qu·∫£n l√Ω
                ballsInMachine = ballsInMachine.filter(b => b.id !== winnerData.id);
                physicsBalls = physicsBalls.filter(p => {
                    if (p.customData.id === winnerData.id) {
                        World.remove(world, p);
                        return false;
                    }
                    return true;
                });
            }

            return winners;
        }

        function showEgg(winnerData) {
            eggColor.setAttribute('fill', winnerData.color.main)
            openEggColor.setAttribute('fill', winnerData.color.main)

            // --- THAY ƒê·ªîI ·ªû ƒê√ÇY ---
            egg.classList.add('active', 'egg-pop-in'); // Th√™m class animation
            // X√≥a class animation sau khi n√≥ ch·∫°y xong ƒë·ªÉ c√≥ th·ªÉ d√πng l·∫°i
            egg.addEventListener('animationend', () => {
                egg.classList.remove('egg-pop-in');
            }, { once: true });
            // --- K·∫æT TH√öC THAY ƒê·ªîI ---

            currentWinnerBall = winnerData
            hasWinner = true
        }

        function addBallToTray(winnerData) {
            // N·∫øu khay ƒë·∫ßy, x√≥a vi√™n k·∫πo c≈© nh·∫•t kh·ªèi m·∫£ng D·ªÆ LI·ªÜU
            if (trayBalls.length >= MAX_TRAY_BALLS) {
                trayBalls.shift();
            }
            trayBalls.push(winnerData);

            // Thay v√¨ v·∫Ω l·∫°i, ch·ªâ g·ªçi animation. H√†m renderTray s·∫Ω ƒë∆∞·ª£c g·ªçi sau.
            animateBallToTray(winnerData, trayBalls.length - 1, () => {
                // Sau khi animation bay xong, V·∫º L·∫†I TO√ÄN B·ªò KHAY ƒë·ªÉ ƒë·∫£m b·∫£o v·ªã tr√≠ ƒë√∫ng
                renderTray();
            });
        }
        function renderTray() {
            const trayContainer = document.getElementById('tray-candies');
            trayContainer.innerHTML = ''; // Lu√¥n x√≥a s·∫°ch tr∆∞·ªõc khi v·∫Ω l·∫°i

            trayBalls.forEach((ballData, index) => {
                const svgNamespace = 'http://www.w3.org/2000/svg';
                const g = document.createElementNS(svgNamespace, 'g');
                g.classList.add('tray-candy');
                g.setAttribute('data-candy-id', ballData.id);

                const x = 100 + index * 90; // V·ªã tr√≠ ƒë∆∞·ª£c t√≠nh l·∫°i d·ª±a tr√™n index m·ªõi
                const y = 1000;
                g.style.transform = `translate(${x}px, ${y}px)`;

                const { main, sub } = ballData.color;

                const circle = document.createElementNS(svgNamespace, 'circle');
                circle.setAttribute('cx', 0);
                circle.setAttribute('cy', 0);
                circle.setAttribute('r', 35);
                circle.setAttribute('fill', main);
                circle.setAttribute('stroke', '#57172F');
                circle.setAttribute('stroke-width', 8);

                const ellipse = document.createElementNS(svgNamespace, 'ellipse');
                ellipse.setAttribute('cx', -8.75);
                ellipse.setAttribute('cy', -12.25);
                ellipse.setAttribute('rx', 17.5);
                ellipse.setAttribute('ry', 6.3);
                ellipse.setAttribute('fill', sub);
                ellipse.setAttribute('opacity', 0.7);

                g.appendChild(circle);
                g.appendChild(ellipse);
                g.style.cursor = 'pointer';

                // G·∫Øn s·ª± ki·ªán click
                g.addEventListener('click', () => {
                    winnerDisplay.innerHTML = `
                <div style="background-color: ${ballData.color.main}; padding: 20px; border-radius: 15px; color: white; font-weight: bold; display: flex; flex-direction: column; align-items: center; gap: 15px; text-align: center;">
                    ${ballData.image
                            ? `<img src="${ballData.image}" style="width: 256px; height: 256px; object-fit: contain;" alt="${ballData.text}" />`
                            : ''
                        }
                    <span style="font-size: 24px;">${ballData.text}</span>
                </div>`;

                    const openEgg = document.querySelector('.open-egg-color');
                    if (openEgg) {
                        openEgg.setAttribute('fill', ballData.color.main);
                    }
                    mask.classList.add('active');

                    // X√≥a k·∫πo kh·ªèi m·∫£ng d·ªØ li·ªáu
                    const ballIndex = trayBalls.findIndex(b => b.id === ballData.id);
                    if (ballIndex > -1) {
                        trayBalls.splice(ballIndex, 1);
                    }

                    // V·∫Ω l·∫°i to√†n b·ªô khay ƒë·ªÉ c√°c vi√™n k·∫πo d·ªìn l√™n
                    renderTray();
                });

                g.addEventListener('mouseenter', () => g.classList.add('hover'));
                g.addEventListener('mouseleave', () => g.classList.remove('hover'));

                trayContainer.appendChild(g);
            });
        }

        function animateBallToTray(candyData, trayIndex, onComplete) {
            animatingToTrayCount++; // TƒÉng bi·∫øn ƒë·∫øm khi b·∫Øt ƒë·∫ßu animation

            const svgNamespace = 'http://www.w3.org/2000/svg';
            const machineSvg = document.querySelector('.machine');

            const g = document.createElementNS(svgNamespace, 'g');
            g.classList.add('moving-candy');

            const circle = document.createElementNS(svgNamespace, 'circle');
            circle.setAttribute('cx', 313.5);
            circle.setAttribute('cy', 885.5);
            circle.setAttribute('r', 40.5);
            circle.setAttribute('fill', candyData.color.main);
            circle.setAttribute('stroke', '#57172F');
            circle.setAttribute('stroke-width', 10);
            g.appendChild(circle);

            const ellipse = document.createElementNS(svgNamespace, 'ellipse');
            ellipse.setAttribute('cx', 303.375);
            ellipse.setAttribute('cy', 871.825);
            ellipse.setAttribute('rx', 20.25);
            ellipse.setAttribute('ry', 7.29);
            ellipse.setAttribute('fill', candyData.color.sub);
            ellipse.setAttribute('opacity', 0.7);
            g.appendChild(ellipse);

            machineSvg.appendChild(g);

            // T√≠nh to√°n v·ªã tr√≠ ƒë√≠ch
            const targetX = 100 + trayIndex * 90;
            const targetY = 1000;

            // ƒê·∫∑t bi·∫øn CSS cho animation
            g.style.setProperty('--target-x', `${targetX - 313.5}px`);
            g.style.setProperty('--target-y', `${targetY - 885.5}px`);

            const animationEndCallback = () => {
                animatingToTrayCount--; // Gi·∫£m bi·∫øn ƒë·∫øm khi animation k·∫øt th√∫c
                machineSvg.removeChild(g);
                if (onComplete) {
                    onComplete();
                }
                g.removeEventListener('animationend', animationEndCallback);
            };

            g.addEventListener('animationend', animationEndCallback);
        }

        function gameLoop() {
            Engine.update(engine)
            renderSVG()
            requestAnimationFrame(gameLoop)
        }

        // =================================================================
        // C√ÅC EVENT LISTENER CH√çNH C·ª¶A GAME
        // =================================================================

        switchBtn.addEventListener('click', function () {
            if (isProcessing) return;

            const quantity = parseInt(quantityInput.value, 10);
            if (isNaN(quantity) || quantity < 1) return;

            // G·ªåI H√ÄM PLAY C·ª¶A MANAGER
            if (window.musicManager) {
                window.musicManager.play();
            } else {
                console.error("musicManager ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!");
            }

            // --- B·∫ÆT ƒê·∫¶U KH·ªêI LOGIC KI·ªÇM TRA ƒê√É S·ª¨A L·ªñI ---
            // Logic n√†y gi·∫£i quy·∫øt l·ªói "b·∫•m nhanh" b·∫±ng c√°ch t√≠nh c·∫£ nh·ªØng vi√™n k·∫πo ƒëang bay (`animatingToTrayCount`)

            // 1. Ki·ªÉm tra xem m√°y c√≤n ƒë·ªß k·∫πo kh√¥ng
            if (ballsInMachine.length < quantity) {
                isErrorMessage = true;
                winnerDisplay.innerHTML = `<div class="candy-popup" style="background-color: #FF6B6B"><span>${formatMessage(language.error_not_enough_candy, { count: ballsInMachine.length })}</span></div>`;
                mask.classList.add('active');
                return;
            }

            // 2. T√≠nh to√°n ch√≠nh x√°c s·ªë ch·ªó tr·ªëng c√≤n l·∫°i trong khay
            // Ch·ªó tr·ªëng = T·ªëi ƒëa - (S·ªë k·∫πo ƒë√£ ·ªü trong khay) - (S·ªë k·∫πo ƒëang bay t·ªõi)
            let availableTraySpace = MAX_TRAY_BALLS - trayBalls.length - animatingToTrayCount;

            // 3. X·ª≠ l√Ω tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát: N·∫øu c√≥ qu·∫£ tr·ª©ng ƒëang ch·ªù, n√≥ s·∫Ω chi·∫øm 1 ch·ªó
            // ngay khi l·∫ßn quay m·ªõi b·∫Øt ƒë·∫ßu. V√¨ v·∫≠y, ta ph·∫£i tr·ª´ n√≥ kh·ªèi s·ªë ch·ªó tr·ªëng c√≥ s·∫µn.
            if (hasWinner && currentWinnerBall) {
                availableTraySpace--;
            }

            // 4. So s√°nh s·ªë l∆∞·ª£ng mu·ªën quay v·ªõi s·ªë ch·ªó tr·ªëng th·ª±c t·∫ø.
            // ƒê√¢y l√† ƒëi·ªÅu ki·ªán ki·ªÉm tra duy nh·∫•t, √°p d·ª•ng cho m·ªçi tr∆∞·ªùng h·ª£p.
            if (quantity > availableTraySpace) {
                isErrorMessage = true;
                // T·∫°o th√¥ng b√°o l·ªói th√¥ng minh h∆°n cho ng∆∞·ªùi d√πng
                let errorMessage = language.error_tray_not_enough_space_general;
                if (availableTraySpace <= 0) {
                    errorMessage = language.error_tray_full;
                } else {
                    errorMessage = formatMessage(language.error_tray_not_enough_space, { count: availableTraySpace });
                }
                winnerDisplay.innerHTML = `<div class="candy-popup" style="background-color: #FF6B6B"><span>${errorMessage}</span></div>`;
                mask.classList.add('active');
                return;
            }
            // --- K·∫æT TH√öC KH·ªêI LOGIC KI·ªÇM TRA ---


            // ---- B·∫ÆT ƒê·∫¶U X·ª¨ L√ù QUAY ----
            isProcessing = true;
            gachaponContainer.classList.add('machine-shake');
            setTimeout(() => gachaponContainer.classList.remove('machine-shake'), 500);
            switchSound.currentTime = 0;
            switchSound.play();
            this.classList.add('active');
            setTimeout(() => this.classList.remove('active'), 600);

            // N·∫øu c√≥ tr·ª©ng ƒëang ch·ªù, di chuy·ªÉn n√≥ v√†o khay tr∆∞·ªõc
            if (hasWinner && currentWinnerBall) {
                const ballToMoveToTray = currentWinnerBall;
                egg.classList.remove('active');

                // V·ªã tr√≠ ƒë√≠ch c·ªßa qu·∫£ tr·ª©ng n√†y l√† t·ªïng s·ªë k·∫πo ƒëang c√≥ v√† ƒëang bay t·ªõi
                const targetTrayIndexForEgg = trayBalls.length + animatingToTrayCount;
                animateBallToTray(ballToMoveToTray, targetTrayIndexForEgg, () => {
                    // Sau khi animation xong, m·ªõi c·∫≠p nh·∫≠t m·∫£ng d·ªØ li·ªáu v√† render l·∫°i
                    if (trayBalls.length >= MAX_TRAY_BALLS) trayBalls.shift();
                    trayBalls.push(ballToMoveToTray);
                    renderTray();
                });
                currentWinnerBall = null;
                hasWinner = false;
            }

            spinMachine();

            setTimeout(() => {
                // Tr∆∞·ªùng h·ª£p quay 1 vi√™n: ch·ªâ c·∫ßn hi·ªán tr·ª©ng
                if (quantity === 1) {
                    const newWinner = pickWinnerBalls(1)[0];
                    if (newWinner) {
                        showEgg(newWinner);
                    }
                    isProcessing = false;
                } else {
                    // Tr∆∞·ªùng h·ª£p quay nhi·ªÅu vi√™n: cho bay th·∫≥ng v√†o khay
                    const winners = pickWinnerBalls(quantity);
                    if (winners.length > 0) {
                        winners.forEach((winner, index) => {
                            // Delay gi·ªØa c√°c l·∫ßn ra k·∫πo cho ƒë·∫πp m·∫Øt
                            setTimeout(() => {
                                // T√çNH TO√ÅN V·ªä TR√ç ƒê√çCH CH√çNH X√ÅC
                                // V·ªã tr√≠ ƒë√≠ch = (s·ªë k·∫πo ƒë√£ n·∫±m im) + (s·ªë k·∫πo ƒëang bay)
                                // V√¨ c√°c l·∫ßn g·ªçi ƒë∆∞·ª£c delay, `animatingToTrayCount` ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª´ l·∫ßn tr∆∞·ªõc.
                                const targetTrayIndex = trayBalls.length + animatingToTrayCount;

                                animateBallToTray(winner, targetTrayIndex, () => {
                                    // Callback n√†y ch·∫°y KHI VI√äN K·∫∏O ƒê√É BAY T·ªöI N∆†I
                                    if (trayBalls.length >= MAX_TRAY_BALLS) {
                                        trayBalls.shift();
                                    }
                                    trayBalls.push(winner);
                                    renderTray(); // V·∫Ω l·∫°i to√†n b·ªô khay ƒë·ªÉ ƒë·∫£m b·∫£o v·ªã tr√≠ ƒë√∫ng

                                    // Khi vi√™n k·∫πo cu·ªëi c√πng ƒë√£ bay xong, cho ph√©p quay ti·∫øp
                                    if (index === winners.length - 1) {
                                        isProcessing = false;
                                    }
                                });
                                revealSound.play(); // √Çm thanh cho m·ªói vi√™n k·∫πo
                            }, index * 400); // Delay 400ms gi·ªØa m·ªói vi√™n
                        });
                    } else {
                        isProcessing = false; // Kh√¥ng c√≥ k·∫πo n√†o ƒë∆∞·ª£c ch·ªçn
                    }
                }
            }, 1500); // Ch·ªù m√°y quay xong
        });


        egg.addEventListener('click', function () {
            if (!currentWinnerBall) return

            revealSound.play();  // Ch∆°i √¢m thanh chi·∫øn th·∫Øng
            isFromStickyNote = false
            winnerDisplay.innerHTML = `
        <div style="background-color: ${currentWinnerBall.color.main
                }; padding: 30px 20px 20px 20px; border-radius: 15px; color: white; font-weight: bold; display: flex; flex-direction: column; align-items: center; gap: 15px; text-align: center;">
           ${currentWinnerBall.image
                    ? `<img src="${currentWinnerBall.image}" style="width: 256px; height: 256px; object-fit: contain;" alt="${currentWinnerBall.text}" />`
                    : ''
                }
           <span style="font-size: 24px;">${currentWinnerBall.text}</span>
        </div>`
            mask.classList.add('active')

            this.classList.remove('active')
            currentWinnerBall = null
            hasWinner = false
        })

        mask.addEventListener('click', function (event) {
            if (event.target === this) {
                // Ki·ªÉm tra xem c√≥ ph·∫£i l√† th√¥ng b√°o l·ªói kh√¥ng
                if (isErrorMessage) {
                    isErrorMessage = false; // Reset c·ªù
                    this.classList.remove('active');
                    return; // D·ª´ng l·∫°i, kh√¥ng l√†m g√¨ th√™m
                }

                // Ch·ªâ l∆∞u v√†o sticky note n·∫øu ƒë√¢y l√† l·∫ßn m·ªü ƒë·∫ßu ti√™n (kh√¥ng ph·∫£i m·ªü l·∫°i t·ª´ sticky note)
                if (!isFromStickyNote && winnerDisplay.innerHTML.trim()) {
                    const eggColor = openEggColor.getAttribute('fill');
                    createStickyNote(winnerDisplay.innerHTML, eggColor);
                }

                isFromStickyNote = false;
                this.classList.remove('active');
            }
        });

        // Kh·ªüi ƒë·ªông game
        initializeCandies()
        createPhysicsBalls()
        gameLoop()
        if (topLight) {
            topLight.classList.add('light-pulse');
        }
        const quantityInput = document.getElementById('quantity-input');
        const increaseBtn = document.getElementById('increase-btn');
        const decreaseBtn = document.getElementById('decrease-btn');

        increaseBtn.addEventListener('click', () => {
            // S·ª≠a radix t·ª´ 6 th√†nh 10
            let currentValue = parseInt(quantityInput.value, 10);
            if (currentValue < 6) { // Gi·ªõi h·∫°n t·ªëi ƒëa l√† 6
                quantityInput.value = currentValue + 1;
            }
        });

        decreaseBtn.addEventListener('click', () => {
            // S·ª≠a radix t·ª´ 6 th√†nh 10
            let currentValue = parseInt(quantityInput.value, 10);
            if (currentValue > 1) {
                quantityInput.value = currentValue - 1;
            }
        });

        quantityInput.addEventListener('change', () => {
            // S·ª≠a radix t·ª´ 6 th√†nh 10
            let value = parseInt(quantityInput.value, 10);
            if (isNaN(value) || value < 1) {
                quantityInput.value = 1;
            }
            if (value > 6) { // Gi·ªõi h·∫°n t·ªëi ƒëa
                quantityInput.value = 6;
            }
        });
    })
})()